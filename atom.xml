<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GreetingPine</title>
  
  <subtitle>Welcome to GreetingPine</subtitle>
  <link href="https://greetingpine.github.io/atom.xml" rel="self"/>
  
  <link href="https://greetingpine.github.io/"/>
  <updated>2022-05-28T14:52:05.256Z</updated>
  <id>https://greetingpine.github.io/</id>
  
  <author>
    <name>zhiyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01-Java简介</title>
    <link href="https://greetingpine.github.io/2022/05/28/java-jian-jie/"/>
    <id>https://greetingpine.github.io/2022/05/28/java-jian-jie/</id>
    <published>2022-05-28T14:43:22.000Z</published>
    <updated>2022-05-28T14:52:05.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是Java？"><a href="#一、什么是Java？" class="headerlink" title="一、什么是Java？"></a>一、什么是Java？</h2><blockquote><p>感兴趣的可以去看看<a href="https://baike.baidu.com/item/java/85979">百度百科:Java</a></p></blockquote><p>Java语言最初由<a href="https://baike.baidu.com/item/Sun%20Microsystems/6064586?fromtitle=SUN&fromid=69463">SUN Sun Microsystems</a>公司的<a href="https://baike.baidu.com/item/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E9%AB%98%E6%96%AF%E6%9E%97?fromtitle=James+Gosling&fromid=4616494">James Gosling</a>(詹姆斯·高斯林)在1990年创建并于1995年正式公布。James Gosling毕业后到IBM工作，设计<a href="https://baike.baidu.com/item/ibm/9190">IBM</a>第一代工作站NeWS系统，但不受重视。后来转至Sun公司。1990年，与Patrick Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“<a href="https://baike.baidu.com/item/Oak">Oak</a>”，后改名为Java。1994年底，James Gosling在硅谷召开的“技术、教育和设计大会”上展示Java程式。2000年，Java成为世界上最流行的电脑语言。后来于2009年四月，Sun被<a href="https://baike.baidu.com/item/%E7%94%B2%E9%AA%A8%E6%96%87%E5%85%AC%E5%8F%B8">甲骨文公司</a>并购，所以现在Java是归属于甲骨文（Oracle）。</p><p><img src="/PICTURE/day01/image-20220520221952517.png"></p><p>Java是一门<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a>的编程语言，其不仅吸收了C++语言的各种优点，还摒弃了 C++里难以理解的多继承、指针等概念，因此 Java 语言具有<strong>功能强大</strong>和<strong>简单易用</strong>两个特征。</p><h3 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h3><p>Java语言特点有简单性、面向对象、分布性、编译和解释性、稳健性、安全性、可移植性、高性能、多线程性、动态性（文章开头百度百科链接中已有说明），下面就其中几个特性进行简单说明：</p><h4 id="面向对象简单理解"><a href="#面向对象简单理解" class="headerlink" title="面向对象简单理解"></a>面向对象简单理解</h4><p>如何理解面向对象与面向过程的区别呢？</p><p><strong>面向过程：</strong></p><p>面向过程是一种以过程为中心的编程思想，其实就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了</p><p><strong>面向对象：</strong></p><p>面向对象则是以对象为核心，把整个需求按照特点、功能划分，将这些存在共性的部分封装成类（类实例化后才是对象），即当解决一个问题的时候，面向对象会把事物抽象成对象的概念，看这个需求之中有哪些对象，而后给不同的对象赋予各自的属性与行为，然后让每个对象去执行自己的方法，从而解决问题。</p><p><strong>优劣比较：</strong></p><ol><li>面向过程不支持丰富的“面向对象”特性（比如继承、多态）。</li><li>面向对象语言在内部被表示为一个指向一组属性的指针。任何对这个对象的操作都会经过这个指针操作对象的属性和方法。</li><li>面向过程性能高于面向对象，因为没有实例化过程的开销，而是直接调用方法。</li><li>面向对象易维护、易复用、易扩展</li></ol><h4 id="可移植性-x2F-平台无关性"><a href="#可移植性-x2F-平台无关性" class="headerlink" title="可移植性&#x2F;平台无关性"></a>可移植性&#x2F;平台无关性</h4><p>可移植性即Java程序只需要“一次编译，处处运行”。什么意思呢？也就是说同一个Java源代码既可以在windows操作系统下运行又可以在Linux或者Mac OS环境下运行，并且不需要修改Java源程序。</p><p>如何实现的呢？通过JVM机制，实际上我们所写的Java程序并没有直接在我们的实际操作系统上运行，而是在操作系统上先安装了JVM，然后将Java程序放在JVM当中运行，JVM屏蔽了各操作系统间的差异来达到平台无关性。</p><p><img src="/PICTURE/day01/%E5%B9%B3%E5%8F%B0%E6%97%A0%E5%85%B3%E6%80%A7.png" alt="平台无关性"></p><blockquote><p> 感兴趣的可以看看这篇文章：<a href="https://www.hollischuang.com/archives/3430">Java是如何实现平台无关性的</a></p></blockquote><h3 id="Java版本选择"><a href="#Java版本选择" class="headerlink" title="Java版本选择"></a>Java版本选择</h3><p>Oracle：<a href="https://www.oracle.com/">https://www.oracle.com</a></p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-20%2022.52.55.png" alt="截屏2022-05-20 22.52.55"></p><p>可以看到目前最新JDK版本是：JDK 18</p><p>其中JDK 1.8（也称JDK 8.0）被认为是最成熟稳定的版本，在市场上应用的最广泛。当然后面到Spring框架的时候会发现一些新版本的框架已经不支持JDK 8.0，但这并不影响JDK 8.0的经典性。</p><h3 id="Java排行"><a href="#Java排行" class="headerlink" title="Java排行"></a>Java排行</h3><p>关于各语言在世界的排行我们可以通过<a href="https://www.tiobe.com/tiobe-index/">TIOBE</a>进行查看</p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-20%2022.59.03.png" alt="截屏2022-05-20 22.59.03"></p><h3 id="Java开发形式"><a href="#Java开发形式" class="headerlink" title="Java开发形式"></a>Java开发形式</h3><p>Java 包括三大块，分别是JavaSE、JavaEE、JavaME</p><ul><li><strong>Java SE（标准版）：</strong>是Java标准开发，包含了Java基础语法与核心技术，提供的是底层的支持，实现了桌面程序的开发，主要就是单机程序，但是这个单机程序现在为止，实际上市场的份额并不高。</li><li><strong>Java EE（企业版）：</strong>主要是进行企业平台的搭建，现在主要的开发是互联网平台。互联网平台对于JAVA的要求越来越高，因为更多的情况下要考虑大用户访问的处理能力，所以今天为止我们再见到 Java 的这个过程基本上已经可以确定一点就是它已经不像最初我们开发那样只是个单机版程序。同时，企业版提供了13项技术规范（Web开发、数据库JDBC开发……），但在实际开发之中由于有第三方类库的存在，多数时候都是采用第三方类库进行开发。而Java提供的类库也并非一无是处，常用的有servlet规范，以及jsp规范，这两项规范在web相关开发之中会用到。</li><li><strong>Java ME（微型版）：</strong>即嵌入式开发（已过时）</li></ul><p>三者关系图：</p><p><img src="/PICTURE/day01/Java%E5%BC%80%E5%8F%91%E5%BD%A2%E5%BC%8F.png"></p><h2 id="二、认识JDK、JRE与JVM"><a href="#二、认识JDK、JRE与JVM" class="headerlink" title="二、认识JDK、JRE与JVM"></a>二、认识JDK、JRE与JVM</h2><ul><li><strong>JDK（Java Development Kit）：</strong> 是 Java 语言的软件开发工具包，也可以称之为SDK，JDK 安装之后，它会自带一个 JRE，所以在安装JDK的时候不需要再装JRE。</li><li><strong>JRE（Java Runtime Environment）：</strong>是运行JAVA 程序所必须的环境的集合，<strong>包含JVM 标准实现及Java 核心类库</strong>。 </li><li><strong>JVM（Java Virtual Machine）：</strong>Java 虚拟机是一种用于计算设备的规范，其<strong>真正执行Java程序</strong>，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</li></ul><p><img src="/PICTURE/day01/%E5%BC%80%E5%8F%91%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><p>从图片不难看出三者之间的关系就是：JDK包含JRE，JRE包含JVM。所以只需要安装JDK就足够了。</p><p>完整关系图如下：</p><p><img src="https://img-blog.csdnimg.cn/20181102183439614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx,size_16,color_FFFFFF,t_70"></p><p>图片来源：<a href="https://img-blog.csdnimg.cn/20181102183439614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20181102183439614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx,size_16,color_FFFFFF,t_70</a></p><h2 id="三、bs架构和cs架构"><a href="#三、bs架构和cs架构" class="headerlink" title="三、bs架构和cs架构"></a>三、bs架构和cs架构</h2><h3 id="Client-Server架构"><a href="#Client-Server架构" class="headerlink" title="Client-Server架构"></a>Client-Server架构</h3><blockquote><p>服务器-客户机，即Client-Server(C&#x2F;S)结构。C&#x2F;S结构通常采取两层结构。服务器负责数据（如声音、图像、符号、文字等）的管理，客户机负责完成与用户的交互任务。</p></blockquote><p>客户机通过局域网与服务器相连，接受用户的请求，并通过网络向服务器提出请求，对数据库进行操作。服务器接受客户机的请求，将数据提交给客户机，客户机将数据进行计算并将结果呈现给用户。服务器还要提供完善安全保护及对数据完整性（即存储在数据库中的所有数据值均保持正确状态，如果数据库中存储有不正确的数据值，则该数据库称为已丧失数据完整性）的处理等操作，并允许多个客户机同时访问服务器，这就对服务器的硬件处理数据能力提出了很高的要求。</p><p><img src="/PICTURE/day01/CS%E6%9E%B6%E6%9E%84.png"></p><p>C&#x2F;S架构分为两部分：</p><ol><li><strong>服务器部分</strong>是多个用户共享的信息与功能，执行后台服务，如控制共享数据库的操作等;</li><li><strong>客户机部分</strong>为用户所专有，负责执行前台功能，在出错提示、在线帮助等方面都有强大的功能，并且可以在子程序间自由切换。</li></ol><h3 id="Browser-Server架构"><a href="#Browser-Server架构" class="headerlink" title="Browser-Server架构"></a>Browser-Server架构</h3><blockquote><p>随着网络技术的发展，特别随着Web技术的不断成熟，B&#x2F;S 这种软件体系结构出现了。B&#x2F;S（Browser&#x2F;Server）架构也被称为浏览器&#x2F;服务器体系结构，这种体系结构可以理解为是对 C&#x2F;S 体系结构的改变和促进。</p></blockquote><p>由于网络的快速发展，B&#x2F;S 结构的功能越来越强大。这种结构可以进行信息分布式处理，可以有效降低资源成本，提高设计的系统性能。B&#x2F;S 架构是有更广的应用范围，在处理模式上大大简化了客户端，用户<strong>只需安装浏览器</strong>即可，而将应用逻辑集中在服务器和中间件上，可以提高数据处理性能。在软件的通用性上，B&#x2F;S 架构的客户端具有更好的通用性，对应用环境的依赖性较小，同时因为客户端使用浏览器，在开发维护上更加便利，可以减少系统开发和维护的成本。</p><p><img src="/PICTURE/day01/BS%E6%9E%B6%E6%9E%84.png"></p><p>在 B&#x2F;S 结构中，每个节点都分布在网络上，这些网络节点可以分为浏览器端、服务器端和中间件，通过它们之间的链接和交互来完成系统的功能任务。三个层次的划分是从逻辑上分的，在实际应用中多根据实际<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E7%BD%91%E7%BB%9C/6639862">物理网络</a>进行不同的物理划分。</p><ol><li><p><strong>浏览器端：</strong>即用户使用的浏览器，是用户操作系统的接口，用户通过浏览器界面向服务器端提出请求，并对服务器端返回的结果进行处理并展示，通过界面可以将系统的逻辑功能更好的表现出来。</p></li><li><p><strong>服务器端：</strong>提供数据服务，操作数据，然后把结果返回中间层，结果显示在系统界面上。</p></li><li><p><strong>中间件：</strong>这是运行在浏览器和服务器之间的。这层主要完成系统逻辑，实现具体的功能，接受用户的请求并把这些请求传送给服务器，然后将服务器的结果返回给用户，<strong>浏览器端和服务器端需要交互的信息是通过中间件完成的</strong>。</p></li></ol><p>简单理解：</p><p><img src="/PICTURE/day01/BS%E6%9E%B6%E6%9E%84%E4%B8%8ECS%E6%9E%B6%E6%9E%84.png"></p><p>如何简单理解呢，就好比我们如果想要访问百度应用软件，可以直接通过浏览器输入地址：<a href="http://www.baidu.com来进行访问(b/S%EF%BC%89%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E4%B8%8B%E8%BD%BD%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%AD%A4%E6%97%B6%E5%B0%86%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%9C%E4%B8%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%82%E6%88%91%E4%BB%AC%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E7%99%BE%E5%BA%A6APP%EF%BC%88%E4%B8%8B%E8%BD%BD%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89%E5%88%B0%E8%AE%BE%E5%A4%87%E4%B8%8A%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E3%80%82%E4%BD%86%E6%98%AFB/S%E6%9E%B6%E6%9E%84%E7%94%B1%E4%BA%8E%E6%98%AF%E9%83%A8%E7%BD%B2%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BC%9A%E5%8F%97%E5%88%B0%E7%BD%91%E9%80%9F%E5%B8%A6%E5%AE%BD%E9%99%90%E5%88%B6%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%9A%84%E8%B5%84%E6%BA%90%E6%98%AF%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E8%BD%BD%E7%84%B6%E5%90%8E%E4%BC%A0%E8%BE%93%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82">www.baidu.com来进行访问（B/S），不需要下载客户端此时将浏览器作为客户端。我们也可以通过在应用商店下载一个百度APP（下载客户端）到设备上进行访问。但是B/S架构由于是部署在远程服务器上，所以会受到网速带宽限制，因为我们需要的资源是通过远程服务器下载然后传输到本地。</a></p><h2 id="四、JDK下载与配置环境变量"><a href="#四、JDK下载与配置环境变量" class="headerlink" title="四、JDK下载与配置环境变量"></a>四、JDK下载与配置环境变量</h2><p>1、进入Oracle官网：<a href="https://www.oracle.com/index.html">https://www.oracle.com/index.html</a></p><p>2、Products -&gt; Java -&gt; Download Java</p><p>![JDK 1](PICTURE&#x2F;day02&#x2F;JDK 1.png)</p><p><img src="/PICTURE/day02/JDK2.png" alt="截屏2022-05-23 13.58.08"></p><p>3、下拉找到相应的操作系统系统版本</p><p><img src="/PICTURE/day02/JDK3.png" alt="截屏2022-05-23 13.53.21"></p><p>4、下载</p><p><img src="/PICTURE/day01/JDK4.png" alt="JDK4"></p><p><strong>Windows：</strong></p><p>5、选择一个盘符新建文件夹（如JDK11）</p><p>6、双击运行刚才下载的 jdk….exe 文件、点击下一步</p><p>7、点击更改按钮，将默认的安装路径改成刚才创建的文件夹（即指定安装路径）</p><p><img src="/PICTURE/day01/JDK5.png" alt="JDK5"></p><p>8、下一步、关闭</p><p>9、打开【我的电脑】找到【属性】打开【高级系统设置】点击【环境变量】在系统变量中点击新建</p><p><img src="/PICTURE/day01/JDK6.png" alt="JDK6"></p><p>10、变量名字填：JAVA_HOME    变量值填写：你的JDK安装路径 （如：C:\JDK11）</p><p><img src="/PICTURE/day01/JDK7.png" alt="JDK7"></p><blockquote><p>JAVA_HOME：JDK安装目录</p></blockquote><p>11、选中 Path 变量，点编辑</p><p><img src="/PICTURE/day01/JDK8.png" alt="JDK8"></p><p>12、点击新建，输入 C:\JDK11\bin 然后点击确定，后面的两个窗口也点击确定</p><p><img src="/PICTURE/day01/JDK9.png" alt="JDK9"></p><blockquote><p>1、12步的输入也可以改成：<code>%JAVA_HOME%\bin</code>（推荐）</p><p>2、<code>CLASSPATH:.;%JAVA_HOME%\lib;dt.jar;tools.jar</code>不需要配置，这是JDK1.6之前的配置，现在已经被内置了</p></blockquote><p><strong>Mac:</strong></p><p>先检查你的mac是否已经自带JDK，打开终端输入：<code>javac</code> ，或者查看<code>/Library/Java/JavaVirtualMachines</code>路径下是否有JDK</p><p><img src="/PICTURE/day01/JDK10.png" alt="JDK10"></p><p>如果没有则重复1-4步然后无脑下一步即可。</p><p>详见：<a href="">Mac环境下安装JDK并配置环境变量</a></p><p>13、检查JDK是否安装与配置是否成功</p><p>Mac系统打开终端、Windows系统按windows +  R打开运行输入cmd回车</p><p>输入：<code>javac</code></p><p><img src="/PICTURE/day01/JDK11.png" alt="JDK11"></p><p>出现以上帮助信息则表示安装成功，可输入<code>java -version</code>查看JDK版本信息</p><p><img src="/PICTURE/day01/JDK12.png" alt="JDK12"></p><blockquote><p>配置环境变量的目的是使相应命令可以在任何路径下都执行，如<code>java</code>、 <code>javac</code>、 <code>javap</code>等。我们是通过将可执行文件的目录位置被配置在系统环境变量的path路径下面</p></blockquote><h2 id="五、HelloWorld"><a href="#五、HelloWorld" class="headerlink" title="五、HelloWorld"></a>五、HelloWorld</h2><p>1、打开记事本写入如下程序保存在你找得到的位置，如桌面，然后修改文件后缀为<code>.java</code>注意文件名与类名保持一致，如TestDemo</p><p><img src="/PICTURE/day01/HelloWorld01.png" alt="HelloWorld01"></p><p>2、打开终端输入：<code>cd 文件路径</code>（直接拖入也可,直接拖入.java文件的情况需要将文件名删除，只需要文件的存储路径部分即可），然后输入<code>javac 文件名.java</code>对源代码进行编译，编译的目的是因为JVM只认识字节码文件即<code>.class</code>文件，所以需要通过javac指令将.java文件编译成.class文件</p><p><img src="/PICTURE/day01/HelloWorld02.png" alt="HelloWorld02"></p><p>这时候回到文件所在目录可以看到出现了一个TestDemo.class文件这就是编译后的字节码文件，也就是JVM执行的文件</p><p><img src="/PICTURE/day01/HelloWorld04.png" alt="HelloWorld04"></p><p>3、接着执行<code>java TestDemo</code>指令，注意此时不需要文件后缀名嗷，当我们执行<code>java</code>指令的时候就会启动一个JVM进程用于执行刚才编译好的.class文件，然后就会输出执行结果啦</p><p><img src="/PICTURE/day01/HelloWorld03.png" alt="HelloWorld03"></p><p>下图描述了上诉过程：（类加载）</p><p><img src="/PICTURE/day01/%E7%AE%80%E5%8D%95%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt="简单类加载过程"></p><p>若你不想在文本编辑器写入源代码也可以如下操作完成上面的操作：</p><p>执行以下命令编写Hello World源代码文件</p><pre><code>cat &gt; Hello.java &lt;&lt;EOF public class Hello &#123;       public static void main(String[] args) &#123;             System.out.println(&quot;Hello World!&quot;);       &#125; &#125; EOF</code></pre><ol><li>执行javac Hello.java编译源文件程序</li><li>执行java Hello运行程序</li><li>执行javap -c Hello查看程序的字节码文件</li></ol><p>执行<code>cat &gt; 类名.java &lt;&lt; EOF</code>,然后写入源代码，再执行<code>EOF</code>(该文件会存到当前路径，也可以进入指定路径操作，就会存储在制定路径)</p><p>例如，我现在当前路径创建一个Test文件夹，而后在文件夹中完成上诉操作：</p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-24%2019.02.31.png" alt="截屏2022-05-24 19.02.31"></p><p>完成后可以看到在相应位置已经出现了刚才写的TestDemo.java文件</p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-24%2019.04.24.png" alt="截屏2022-05-24 19.04.24"></p><p>然后使用<code>javac</code>编译该.java文件为<code>.class</code>可执行文件</p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-24%2019.06.08.png" alt="截屏2022-05-24 19.06.08"></p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-24%2019.05.51.png" alt="截屏2022-05-24 19.05.51"></p><p>最后使用<code>java</code>启动JVM运行该文件</p><p><img src="/PICTURE/day01/%E6%88%AA%E5%B1%8F2022-05-24%2019.06.36.png" alt="截屏2022-05-24 19.06.36"></p><p>自己动手试一试吧！</p><blockquote><p>关于public class 与 class的区别做出如下总结：</p><ol><li>如果使用public修饰符声明一个类，则文件名必须与类名一致，否则出现编译错误；</li><li>类声明没有public修饰时，文件名可以与类名不同，当编译成功后会自动生成对应类名的字节码文件，并且可以运行字节码文件</li><li>在一个java源文件中可以编写任意多个类（但是同一个*.java文件下只能有一个声明为public的类），当编译成功后会自动生成对应类的个数的字节码文件，并且可以运行每个字节码文件。（但是实际开发中一般来说一个java源文件中建议编写一个类）</li></ol></blockquote><h2 id="六、注释"><a href="#六、注释" class="headerlink" title="六、注释"></a>六、注释</h2><blockquote><p>注释的作用是解释说明，增加程序可读性，良好的注释习惯尤为重要。</p></blockquote><p>Java提供了三种注释：</p><ol><li>单行注释：<code>//</code></li><li>多行注释：<code>/* 注释内容 */</code></li><li>文档注释：<code>/** 注释内容 */</code></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//我是单行注释</span><span class="token comment" spellcheck="true">/* 我是多行 注释*/</span><span class="token comment" spellcheck="true">/** * 我是文档注释 */</span></code></pre><h2 id="七、标识符"><a href="#七、标识符" class="headerlink" title="七、标识符"></a>七、标识符</h2><p>在任何一个程序之中实际上都是一个结构的整合体，在Java语言里面有不同的结构，例如：类、方法、变量结构等，那么对于不同的结构一定要有不同的说明。对于结构的说明实际上就是标识符，是有命名要求的，但是一般都要求有意义的单词所组成，同时对于标识符的组成在Java之中的定义如下：由<strong>字母、数字、下划线、＄所组成，其中不能使用数字开头，不能使用Java中的保留字（关键字）</strong>。</p><blockquote><p>中文可以命名，但是开发中禁用，知道即可</p></blockquote><p>标识符命名开发规范：</p><ol><li>见名知意</li><li>类名每个单词首字母大写（如TestDemo）</li><li>变量名称、方法名称、参数名称等采用驼峰命名法（如getAge、setName…）</li><li>命名不宜过长，较长的单词也可以以缩写形式呈现（如average -&gt; avg）</li></ol><h2 id="八、关键字"><a href="#八、关键字" class="headerlink" title="八、关键字"></a>八、关键字</h2><p>关键字是系统对于一些结构的描述处理，有着特殊的含义。例如public、class等就有特殊含义，这些就是关键字，不可以把它作为标识符使用。Java 中的关键字一共包含有如下的一些内容：</p><table><thead><tr><th>关键字</th><th>含义</th><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>抽象类或方法</td><td>enum</td><td>枚举类型</td></tr><tr><td>assert</td><td>用来查找内部程序错误</td><td>extends</td><td>定义一个类的父类</td></tr><tr><td>break</td><td>跳出一个switch或循环</td><td>final</td><td>一个常量，或不能覆盖的一个类或方法</td></tr><tr><td>byte</td><td>8位整数类型</td><td>finally</td><td>try块中总会执行的部分</td></tr><tr><td>case</td><td>switch的一个分支</td><td>float</td><td>单精度浮点数类型</td></tr><tr><td>catch</td><td>捕获异常的try块子句</td><td>for</td><td>一个循环类型</td></tr><tr><td>class</td><td>定义一个类类型</td><td>if</td><td>一个条件语句</td></tr><tr><td>continue</td><td>在循环末尾继续</td><td>implements</td><td>定义一个类实现的接口</td></tr><tr><td>default</td><td>switch的缺省语句</td><td>import</td><td>导入一个包</td></tr><tr><td>do</td><td>do&#x2F;while循环最前面的语句</td><td>instanceof</td><td>测试一个对象是否是某个类的实例</td></tr><tr><td>double</td><td>双精度浮点数类型</td><td>int</td><td>32位整型数</td></tr><tr><td>else</td><td>if语句的else子句</td><td>interface</td><td>接口，一种抽象类型，仅有方法和常量的定义</td></tr><tr><td>long</td><td>64位长整数型</td><td>native</td><td>由宿主系统实现的一个方法</td></tr><tr><td>new</td><td>分配新的类实例</td><td>null</td><td>一个空引用</td></tr><tr><td>package</td><td>包含类的一个包</td><td>private</td><td>表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td>protected</td><td>表示保护类型字段</td><td>public</td><td>表示共有属性或者方法</td></tr><tr><td>return</td><td>从一个方法中返回</td><td>short</td><td>16位整数类型</td></tr><tr><td>static</td><td>这个特性是这个类特有的</td><td>strictfp</td><td>对浮点数计算使用严格的规则</td></tr><tr><td>super</td><td>超类对象或构造函数</td><td>switch</td><td>选择语句</td></tr><tr><td>synchronized</td><td>对线程而言是原子的方法或代码块</td><td>this</td><td>当前类的一个方法或构造函数的隐含参数</td></tr><tr><td>throw</td><td>抛出一个异常</td><td>throws</td><td>一个方法可能抛出的异常</td></tr><tr><td>transient</td><td>标志非永久性的数据</td><td>try</td><td>捕获异常的代码块</td></tr><tr><td>void</td><td>标记方法不返回任何值</td><td>volatile</td><td>标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td>while</td><td>一种循环</td><td></td><td></td></tr></tbody></table><p>对于所有关键字的定义不要求去背，对于以上的关键字有一些简短的说明。</p><ul><li>JDK 1.4的时候出现有assert 关键字，用于异常处理上;</li><li>JDK 1.5的时候出现有enum关键字，用于枚举定义上;</li><li>保留字：未使用到的关键字:goto（转到）、const（常数）; </li><li>有一些属于特殊含义的单词，严格来讲不算是关键字:true、false、null。</li><li>关键字都是小写</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是Java？&quot;&gt;&lt;a href=&quot;#一、什么是Java？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Java？&quot;&gt;&lt;/a&gt;一、什么是Java？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;感兴趣的可以去看看&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="JavaSE" scheme="https://greetingpine.github.io/categories/JavaSE/"/>
    
    
    <category term="Java" scheme="https://greetingpine.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
